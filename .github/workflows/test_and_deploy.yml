# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: tests

on:
  push:
    branches:
      - master
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # these libraries, along with pytest-xvfb (added in the `deps` in tox.ini),
      # enable testing on Qt on linux
      - name: Install Linux libraries
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y libdbus-1-3 libxkbcommon-x11-0 libxcb-icccm4 \
            libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
            libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
      # note: if you need dependencies from conda, considering using
      # setup-miniconda: https://github.com/conda-incubator/setup-miniconda
      # and
      # tox-conda: https://github.com/tox-dev/tox-conda
      - name: Build and test Windows
        if: runner.os == 'Windows' 
        run: |
          C:\Miniconda\condabin\conda.bat init powershell
          C:\Miniconda\condabin\conda.bat create -n myenv python=${{ matrix.python-version }}
          C:\Miniconda\condabin\conda.bat activate myenv
          C:\Miniconda\condabin\conda.bat install --yes -c conda-forge fftw
          copy C:\Miniconda\Library\include\fftw3.h C:\Miniconda\include\fftw3.h
          copy C:\Miniconda\Library\lib\fftw3f.lib C:\Miniconda\libs\fftw3f.lib 
          C:\Miniconda\python.exe -m pip install --upgrade pip
          C:\Miniconda\python.exe -m pip install setuptools numpy torch torchvision scikit-image scipy cython
          C:\Miniconda\python.exe setup.py build_ext --inplace
          dir D:\a\sdeconv\sdeconv\sdeconv\deconv\wrappers
      - name: Build and test macOS
        if: runner.os == 'macOS' 
        run: |
          sudo conda init bash
          sudo conda create -n myenv python=${{ matrix.python-version }}
          sudo $CONDA/bin/activate myenv
          sudo conda install --yes -c conda-forge fftw
          sudo $CONDA/bin/python -m pip install --upgrade pip
          sudo $CONDA/bin/pip install setuptools pytest numpy torch torchvision scikit-image scipy cython tox-gh-actions
          sudo $CONDA/bin/python setup.py build_ext --inplace  
          $CONDA/bin/pytest .
      - name: Build and test Linux
        if: runner.os == 'Linux' 
        run: |
          conda init bash
          conda create -n myenv python=${{ matrix.python-version }}
          $CONDA/bin/activate myenv
          conda install --yes -c conda-forge fftw
          $CONDA/bin/python -m pip install --upgrade pip
          $CONDA/bin/pip install setuptools pytest numpy scipy torch torchvision scikit-image cython tox-gh-actions
          $CONDA/bin/python setup.py build_ext --inplace    
          $CONDA/bin/pytest .

      - name: Coverage
        uses: codecov/codecov-action@v1

  deploy:
    # this will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    needs: [test]
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Build and publish windows
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        if: runner.os == 'Windows' 
        run: |
          C:\Miniconda\condabin\conda.bat init powershell
          C:\Miniconda\condabin\conda.bat create -n myenv python=${{ matrix.python-version }}
          C:\Miniconda\condabin\conda.bat activate myenv
          C:\Miniconda\condabin\conda.bat install --yes -c conda-forge fftw
          copy C:\Miniconda\Library\include\fftw3.h C:\Miniconda\include\fftw3.h
          copy C:\Miniconda\Library\lib\fftw3f.lib C:\Miniconda\libs\fftw3f.lib 
          C:\Miniconda\python.exe -m pip install --upgrade pip
          C:\Miniconda\python.exe -m pip install setuptools numpy scipy cython wheel twine
          C:\Miniconda\python.exe setup.py bdist_wheel
          C:\Miniconda\python.exe -m twine upload -u __token__ -p ${{ secrets.TWINE_API_KEY }} dist\*   
      - name: Build and publish macosx
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        if: runner.os == 'macOS' 
        run: |
          sudo conda init bash
          sudo conda create -n myenv python=3.8
          sudo $CONDA/bin/activate myenv
          sudo conda install --yes -c conda-forge fftw
          sudo $CONDA/bin/python -m pip install --upgrade pip
          sudo $CONDA/bin/pip install setuptools numpy scipy cython wheel twine
          sudo $CONDA/bin/python setup.py bdist_wheel  
          sudo $CONDA/bin/python -m twine upload -u __token__ -p ${{ secrets.TWINE_API_KEY }} dist/*    